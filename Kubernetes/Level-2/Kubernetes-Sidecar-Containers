# Problem Statement
#
#
# We have a web server container running the nginx image.The access and 
# error logs generated by the web server are not critcal enough to be 
# placed on a persistent volume.However,Nautilus developers need access 
# to the last 24 hours of logs so that they can trace issues and bugs.
# Therefore,we need to ship the access and error logs for the web server 
# to a log-aggregation service.Following the separation of concerns principle,
# we implement the Sidecar pattern by deploying a second container that ships 
# the error and access logs from nginx.Nginx does one thing,and it does it 
# well—serving web pages.The second container also specializes in its 
# task—shipping logs.Since containers are running on the same Pod, 
# we can use a shared emptyDir volume to read and write logs.
#
#
# Create a pod named webserver.
#
# Create an emptyDir volume shared-logs.
#
# Create two containers from nginx and ubuntu images with latest tag only and 
# remember to mention tag i.e nginx:latest, nginx container name should be 
# nginx-container and ubuntu container name should be sidecar-container on 
# webserver pod.
#
# Add command on sidecar-container "sh","-c","while true; do cat /var/log/nginx/# access.log /var/log/nginx/error.log; sleep 30; done"
#
# Mount the volume shared-logs on both containers at location /var/log/nginx,
# all containers should be up and running.
#
#
# Solution Script
#
# manifest the yaml file for resource pod
kubectl run webserver --image=nginx:latest --dry-run=client -o yaml > app.yaml
# edit the yaml file as instructed in task
vi app.yaml
cat app.yaml
#-----------------------------------
# content of yaml file
#apiVersion: v1
kind: Pod
metadata:
  name: webserver
spec:
  containers:
  - image: nginx:latest
    name: nginx-container
    volumeMounts:
    - mountPath: /var/log/nginx
      name: shared-logs
  - image: ubuntu:latest
    name: sidecar-container
    command: ["/bin/sh"]
    args: ["-c", "while true; do cat /var/log/nginx/access.log 
            /var/log/nginx/error.log; sleep 30; done"]
    volumeMounts:
    - mountPath: /var/log/nginx
      name: shared-logs
  volumes:
  - name: shared-logs
    emptyDir: {}
#-----------------------------------------------------------------
#
# create resource pod from yaml file
kubectl create -f app.yaml
# validate the task my listing the resource pod with two containers
kubectl get po -o wide


