# Problem Statement
#
# We are working on an application that will be deployed on multiple containers
# within a pod on Kubernetes cluster.There is a requirement to share a volume 
# among the containers to save some temporary data.The Nautilus DevOps team is 
# developing a similar template to replicate the scenario.Below you can find 
# more details about it.
#
#
# Create a pod named volume-share-devops.
#
# For the first container, use image ubuntu with latest tag only and remember 
# to mention the tag i.e ubuntu:latest,container should be named as 
# volume-container-devops-1,and run a sleep command for it so that it remains 
# in running state.Volume volume-share should be mounted at path /tmp/ecommerce.#
# For the second container,use image ubuntu with the latest tag only and 
# remember to mention the tag i.e ubuntu:latest, container should be named 
# as volume-container-devops-2, and again run a sleep command for it so that 
# it remains in running state.Volume volume-share should be mounted at path 
# /tmp/apps.
#
# Volume name should be volume-share of type emptyDir.
#
# After creating the pod,exec into the first container 
# i.e volume-container-devops-1,and just for testing create a file 
# ecommerce.txt with any content under the mounted path of first 
# container i.e /tmp/ecommerce.
#
# The file ecommerce.txt should be present under the mounted path /tmp/apps 
# on the second container volume-container-devops-2 as well,since they are 
# using a shared volume.
#
#
# Solution Script
#
# manifest yaml file for resource pod 
kubectl run volume-share-devops --image=ubuntu:latest --dry-run=client -o yaml >app.yaml
# edit yaml file to create pod
vi app.yaml
#----------------------------------------------
#
# content of yaml file
#
#apiVersion: v1
kind: Pod
metadata:
  name: volume-share-devops
spec:
  containers:
  - image: ubuntu:latest
    name: volume-container-devops-1
    command: ['sh', '-c', 'sleep 3000']
    volumeMounts:
        - name: volume-share
          mountPath: /tmp/ecommerce
  - image: ubuntu:latest
    name: volume-container-devops-2
    command: ['sh', '-c', 'sleep 3000']
    volumeMounts:
        - name: volume-share
          mountPath: /tmp/apps
  volumes:
  - name: volume-share
    emptyDir: {}
#---------------------------------------------------
#
#create resource pod with two containers
kubectl create -f app.yaml
# copy text content to first container
kubectl cp ./ecommerce.txt volume-share-devops:/tmp/ecommerce -c volume-container-devops-1
# check the text content in first container
kubectl exec -it volume-share-devops -c volume-container-devops-1 -- /bin/bash
cat /tmp/ecommerce/ecommerce.txt
# validate the task by checking the content of second container
kubectl exec -it volume-share-devops -c volume-container-devops-2 -- /bin/bash
cat /tmp/apps/ecommerce.txt
#
#[Note: Since both container are mounted into same volume creating content into
# one container also add same content into second container]


